var N = 9;
var Turtle = function(x0, y0, a0) {
    this.pos = new PVector(x0, y0);
    this.angle = a0;
    print("[0, 0],");
};
Turtle.prototype.turnLeft = function(delta) {
    this.angle += delta;
};
Turtle.prototype.goForward = function(step) {
    // step *= 300 / (Math.pow(2, N) - 1);
    var oldPos = this.pos.get();
    this.pos.add(step * Math.cos(this.angle * Math.PI / 180), step * Math.sin(this.angle * Math.PI / 180));
    line(oldPos.x, 20 + oldPos.y, this.pos.x, 20 + this.pos.y);
    print("[" + Math.round(this.pos.x) + ", " + Math.round(this.pos.y) + "],");
};

var turtle;

var H = {
    N: N,
    turtle: new Turtle(0, 0, 0),
    hilbert: function(n) {
        if(n === 0) { return; }
        this.turtle.turnLeft(90);
        this.treblih(n - 1);
        this.turtle.goForward(1);
        this.turtle.turnLeft(-90);
        this.hilbert(n-1);
        this.turtle.goForward(1);
        this.hilbert(n - 1);
        this.turtle.turnLeft(-90);
        this.turtle.goForward(1);
        this.treblih(n - 1);
        this.turtle.turnLeft(90);
    },
    treblih: function(n) {
        if (n === 0) { return; }
        this.turtle.turnLeft(-90);
        this.hilbert(n - 1);
        this.turtle.goForward(1);
        this.turtle.turnLeft(90);
        this.treblih(n - 1);
        this.turtle.goForward(1);
        this.treblih(n - 1);
        this.turtle.turnLeft(90);
        this.turtle.goForward(1);
        this.hilbert(n - 1);
        this.turtle.turnLeft(-90);
    },
    set: function(N, x, y, a) {
        this.N = N || this.N;
        if(x !== undefined) {
            this.turtle = new Turtle(x, y || 0, a || 0);
        }
        this.hilbert(this.N);
    }
};
H.set();
println("");