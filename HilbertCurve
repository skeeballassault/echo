var DIM = 2, ORDER = 32;
var g_mask = [32, 16, 8, 4, 2, 1];//automate this
var Hcode = function() {
	this.hcode = new Array(DIM);
};
var Point = new Hcode();
//hello

/*===========================================================*/
/* 							get_P 							 */
/*===========================================================*/
var get_P = function(i, H) {
	var element = i / ORDER, P, temp1, temp2;
	P = H.hcode[element];
	if( i % ORDER > ORDER - DIM) {
		temp1 = H.hcode[element + 1];
		P >>>= i % ORDER;
		temp1 <<= ORDER - i % ORDER;
		P |= temp1;
	} else {
		P >>>= i % ORDER; /* P is a DIM bit hcode */
	}
	/* the & masks out spurious highbit values */
	if(DIM < ORDER) {
		P &= (1 << DIM) -1;
	}
	return P;
};
/*===========================================================*/
/* 						get_P2 (inverse)					 */
/*===========================================================*/

var get_P2 = function(S) {
	var i, P = S & g_mask[0];
	for(i = 1; i < DIM; i ++) {
		if(S & g_mask[i] ^ (P >>> 1) & g_mask[i]) {
			P |= g_mask[i];
		}
	}
	return P;
};
/*===========================================================*/
/* 							get_J 							 */
/*===========================================================*/

var get_J = function(P) {
	var i, J = DIM;
	for(i = 1; i < DIM; i ++) {
		if((P >>> 1 & 1) === (P & 1)) { continue; } 
		else { break; }
	}
	if(i !== DIM) {
		J -= i;
	}
	return J;
};

/*===========================================================*/
/* 							get_T 							 */
/*===========================================================*/

var get_T = function(P) {
	return (P < 3)? 0 : ((P % 2 === 0)? (P - 1) ^ (P - 1) / 2 : (P - 2) ^ (P - 2) / 2);
};

/*===========================================================*/
/* 						get_tS_tT							 */
/*===========================================================*/
var get_tS_tT = function(xJ, val) {
	var retval = val, temp1, temp2;
	if(xJ % DIM !== 0) {
		temp1 = val >>> xJ % DIM;
		temp2 = val << DIM - xJ % DIM;
		retval = temp1 | temp2;
		retval &= (1 << DIM) - 1; //really: ((U_int) 1 << DIM) cast
	}
	return retval;
};
